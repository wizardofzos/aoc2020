/*--------------------------------------------[REXX]
| Advent of Code 2020          wizard@zdevops.com  |
+-------------------------------------------------*/
say ""                               /*      BEST */
say ""                               /*  ISPF-CLS */
say ""                               /*      EVER */
say "  /*--------------------------------------------[REXX] "
say "  | Advent of Code 2020          wizard@zdevops.com  | "
say "  +-------------------------------------------------*/ "
say "                                              "
say "     _    ___   ____ ____   ___ ____   ___    "
say "    / \  / _ \ / ___|___ \ / _ \___ \ / _ \   "
say "   / _ \| | | | |     __) | | | |__) | | | |  "
say "  / ___ \ |_| | |___ / __/| |_| / __/| |_| |  "
say " /_/   \_\___/ \____|_____|\___/_____|\___/   "
say "                                              "
say "                             >DAY 16/PART 1<  "
say ""
/*------------------------------------------------*/

"ALLOC FI(IN) PATH('/prj/repos/aoc2020/in/d16t2') FILEDATA(TEXT)"
"EXECIO * DISKR IN (STEM inp. FINIS"
"FREE FI(IN)"


your_ticket = ''
nearby. = ''
nearby.0 = 0
valid. = ''
valid.0 = 0

reqfield. = ''
reqfield.0 = 0
reqrule. = ''
reqrule.0 = 0

field. = ''


/* So we get x lines of 'field' and 'requirements' (field: n-n or n-n)
   then a blank line.
   then our ticket (two line)
   then nearby tickets
*/
state = "REQUIREMENTS"
do i = 1 to inp.0
  inp.i = strip(inp.i)
  if inp.i = "" then state = "NONE"
  if state = "REQUIREMENTS" then do
    parse var inp.i what":"rules
    parse var rules f" or "s
    parse var f flo"-"fhi
    parse var s slo"-"shi
    nr = reqfield.0 + 1
    reqfield.nr = what
    reqrule.nr = flo" "fhi" "slo" "shi
    reqfield.0 = nr
    reqrule.0 = nr
  end

  if state = "YOUR" then do
    your_ticket = translate(inp.i,' ',',')
  end

  if state = "NEARBY" then do
    nn = nearby.0 + 1
    nearby.nn = translate(inp.i,' ',',')
    nearby.0 = nn
  end

  if inp.i = "your ticket:" then state = "YOUR"
  if inp.i = "nearby tickets:" then state = "NEARBY"
end


if 1 = 0 then do
  /* print input via 1 = 1 */
  say "your ticket = "your_ticket
  say "rules are"
  do i = 1 to reqrule.0
    say reqfield.i" -> "reqrule.i
  end
  say "nearby tickets"
  do i = 1 to nearby.0
    say nearby.i
  end
end

p1 = 0

do t = 1 to nearby.0
  matchcount = 0
  /* nearby.t = "val1 val2 .." */
  do vi = 1 to words(nearby.t)
    found = 0
    v = word(nearby.t,vi)
    do r = 1 to reqrule.0
      parse var reqrule.r alo ahi blo bhi
      if (v >= alo & v <= ahi ) | ( v >= blo & v <= bhi) then do
        matchcount = matchcount + 1
        found = 1
        leave
      end
    end
    if found = 0 then p1 = p1 + v
  end
  if matchcount = words(nearby.t) then do /* all fields valid! */
    nv = valid.0 + 1
    valid.nv = nearby.t
    valid.0 = nv
  end
end

say "Answer part 1 :"p1
possible. = ''
possible.0 = words(nearby.1)
/* loop all fields on tickets, find match rules */
fields = words(valid.1)
do f = 1 to fields
  bestmatch = ""
  bestscore = 100
  do t = 1 to valid.0
    score = 0
    x = word(valid.t,f)
    matchrules = ""
    do r = 1 to reqrule.0
      parse var reqrule.r alo ahi blo bhi
      if (x >= alo & x <= ahi ) | ( x >= blo & x <= bhi) then do
        /* only add if we don't have that rule yet */
        matchrules = r" "matchrules
      end
    end
    matchrules = remove_double(matchrules)
    score = words(matchrules)
    if score < bestscore then do
      bestscore = score
      bestmatch = matchrules
    end
  end
  missing = misses(bestmatch,reqfield.0) /* might not need? */
  possible.f = bestmatch
  say f"->"bestmatch
end


/* now we have all possible rules for the fields.. time to brute-force*/
/* ugly global donedidit value */
solved = brute2("",words(nearby.1),0)
say solved

exit
/* or we do it smart :) */
do forever
  do field = 1 to words(nearby.1)
    /* check if there are two options and one of those in another as 1 */
    if words(possible.field) = 2 then do
      say "We canb clean"
      do xx = 1 to possible.0
        if xx = field then iterate
        if words(possible.xx) = 1 then do
          if word(possiblle.field,1) = word(possible.xx,1) then do
            possible.field = remove(possible.field, possible.field,1)
          end
          if word(possiblle.field,2) = word(possible.xx,1) then do
            possible.field = remove(possible.field, possible.field,2)
          end
        end
      end
  end
  do field = 1 to words(nearby.1)
    say "Check for  "field
    boo = 0
    say "Possible values field "field" are "possible.field
    if words(possible.field) = 1 then do
      daval = word(possible.field,1)
      say "Field "field" is "daval
      iterate
    end
    end

    do t = 1 to valid.0
      tocheck = word(valid.t, field)
      say " --> is "tocheck" allowed in "possible.field" from "valid.t
      if wordpos(tocheck, possible.field) = 0 then do
        say "Not allowed, so field"field" is not "reqfield.field
        say "remove from options"
        say "and stop checking this ticket"
        possible.field = remove(possible.field, field)
        boo = 1
        leave
      end
      if boo = 1 then say "field "field" is not "reqfield.field
    end
  end
allone = 1
do i = 1 to possible.0
  say i"-->"possible.i
  if words(possible.i) > 1 then allone = 0
end
if allone = 1 then leave
end

say "The mappings are"

do p = 1 to possible.0
  fnum = word(possible.p,1)
  say p" "possible.p" -->"reqfield.fnum
end

/*------------------------------------------------*/
say "                 E N D E D                    "
say "----------------------------------------------"
exit

brute2: procedure expose possible. reqfield.
  arg dumm,need,lvl
  say "Es tu Brutus? "lvl
  have = words(dumm)
  if have = need then return dumm
  do mp = 1 to reqfield.0
     found = 0
     do g = 1 to words(possible.mp)
       try = word(possible.mp,g)
       say "try "try
       if wordpos(try, dumm) = 0 then do
         newdumm = brute2(try" "dumm,need,lvl+1)
         return brute2(newdumm,need,lvl+1)
       end
       else say "nope"
     end
  end
  if found = 0 then say "what"
  return newdumm


remove_double:
  parse arg string_of_words
  unique = ""
  do swc = 1 to words(string_of_words)
    if pos(word(string_of_words,swc), result) = 0 then
      unique = unique" "word(string_of_words,swc)
  end
  return unique

misses:
  parse arg ruleset,count
  cklst. = ''
  do exc = 1 to words(ruleset)
    a16er = word(ruleset,exc)
    cklst.adder = "OK"
  end
  res = ""
  do cc = 1 to count
    if cklst.cc /= "OK" then res = res" "cc
  end
  return res

remove:
  parse arg what where
  res = ""
  do j = 1 to words(where)
    if word(where,j) /= what then res = res" "word(where,j)
  end
  return res
