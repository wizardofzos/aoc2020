/*--------------------------------------------[REXX]
| Advent of Code 2020          wizard@zdevops.com  |
+-------------------------------------------------*/
say ""                               /*      BEST */
say ""                               /*  ISPF-CLS */
say ""                               /*      EVER */
say " wizard@zdevops.com                           "
say "     _    ___   ____ ____   ___ ____   ___    "
say "    / \  / _ \ / ___|___ \ / _ \___ \ / _ \   "
say "   / _ \| | | | |     __) | | | |__) | | | |  "
say "  / ___ \ |_| | |___ / __/| |_| / __/| |_| |  "
say " /_/   \_\___/ \____|_____|\___/_____|\___/   "
say "                                              "
say "                             >DAY 10/PART 1<  "
say ""
/*------------------------------------------------*/

NUMERIC DIGITS 200
"ALLOC FI(IN) DA('ZDO.AOC2020.D10.INPUT') SHR"
"EXECIO * DISKR IN (STEM jolt. FINIS"
"FREE FI(IN)"


/* Prepare intermediate output file (JCL would be so much handier) */
call syscalls 'ON'
address syscall
path = "/tmp/deleteme"
'open' path,
  O_rdwr+O_creat+O_trunc,
  660
fd = retval
address ISPEXEC

/* find max, then hop in +1,+2,+3 to max+3 */
largest_jolt = 0
do i = 1 to jolt.0
  /* strip the blanks */
  jolt.i = strip(jolt.i)
  call write_fd jolt.i                  /* wite to /tmp file */
  if jolt.i > largest_jolt then largest_jolt = jolt.i
end

say "Largest Jolt in bag = " largest_jolt

/* might be too simple, but just sort then count steps... */
address syscall
'close' fd
call syscalls 'OFF'
/* Let's do that sort trick :) */
cmd = "sort -n /tmp/deleteme | tr '\n' ' '"
b = bpxwunix(cmd,,so., se.)
sorted_adapters = so.1
/* prepend the outlet */
sorted_adapters = "0 "sorted_adapters
/* append our device (max jolt +3) */
sorted_adapters = sorted_adapters" "largest_jolt+3


hop1 = 0
hop2 = 0
hop3 = 0

do i = 2 to words(sorted_adapters)
  if word(sorted_adapters,i) - word(sorted_adapters,i-1) = 1
  then hop1 = hop1 + 1
  if word(sorted_adapters,i) - word(sorted_adapters,i-1) = 2
  then hop2 = hop2 + 1
  if word(sorted_adapters,i) - word(sorted_adapters,i-1) = 3
  then hop3 = hop3 + 1
end


say "1-Jolt differences:"hop1
say "2-Jolt differences:"hop2
say "3-Jolt differences:"hop3

say "Answer part 1 "hop1*hop3

/* Get that into a stem */
path. = ''
path.0 = 0
do i = 1 to words(sorted_adapters)
 np = path.0 + 1
 path.np = word(sorted_adapters,i)
 path.0 = np
end

/* keep track of the occurences of each number in the possible paths */
occs. = 0
occs.0 = 1

do i = 0 to path.0 - 1
  /* the value of our current path position */
  val = path.i
  /* get +1, +2 and +3 up they might be in the path */
  v1 = val + 1
  v2 = val + 2
  v3 = val + 3
  /* add the value of the occurences of current value to the +1,+2,+3 */
  occs.v1 = occs.v1 + occs.val
  occs.v2 = occs.v2 + occs.val
  occs.v3 = occs.v3 + occs.val
end


/* The amount of paths our end value is in, is the answer */
say "Answer part 2" occs.largest_jolt


valid_flow:
  parse arg flow
  do w = 1 to words(flow) - 1
    if word(flow,w+1) - word(flow,w) > 3 then return 0
    if word(flow,w+1) - word(flow,w) < 1 then return 0
  end
  return 1

nextoptions:
  nextopts = ""
  parse arg pathpos
  maxval = fullpath.pathpos + 3
  pathpos = pathpos + 1
  do while fullpath.pathpos <= maxval & pathpos <= fullpath.0
    nextopts = nextopts" "pathpos
    pathpos = pathpos + 1
  end
  return nextopts

write_fd:
 parse arg str
 str = str || ESC_N
 address syscall
 'write' fd 'str' length(str)
 return
