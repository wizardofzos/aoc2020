/*--------------------------------------------[REXX]
| Advent of Code 2020          wizard@zdevops.com  |
+-------------------------------------------------*/
say ""                               /*      BEST */
say ""                               /*  ISPF-CLS */
say ""                               /*      EVER */
say " wizard@zdevops.com                           "
say "     _    ___   ____ ____   ___ ____   ___    "
say "    / \  / _ \ / ___|___ \ / _ \___ \ / _ \   "
say "   / _ \| | | | |     __) | | | |__) | | | |  "
say "  / ___ \ |_| | |___ / __/| |_| / __/| |_| |  "
say " /_/   \_\___/ \____|_____|\___/_____|\___/   "
say "                                              "
say "                             >DAY 14/PART 2<  "
say ""
/*------------------------------------------------*/

numeric digits 128

"ALLOC FI(IN) DA('ZDO.AOC2020.D14.INPUT.TEST') SHR"
"EXECIO * DISKR IN (STEM prog. FINIS"
"FREE FI(IN)"


memory. = '0'                  /* Maybe not smart?*/
mask    = ''                   /* always mask is line 1 */
himem   = 0


virtmem. = ''
virtmem.0 = 0

/* Strip bagger */
do i = 1 to prog.0
  prog.i = strip(prog.i)
  parse var prog.i command " = " val
  select
    when command = "mask" then do
      /* set mask */
      mask = val
    end
    otherwise do
                parse var command "mem[" addr "]"
                /* store at addr using mask */
                /* mask can explode abount of mem addresses... */
                /* don't forget highest mem address.... */
                alist    = storeMem(addr,val,mask)
                say "storing "words(alist)" memory addresses"
                do aa = 1 to words(alist)
                  memaddr = word(alist,aa)
                  if memaddr > himem then himem = memaddr
                  /* see if our real address is mapped already?*/
                  found = 0
                  do memi = 1 to virtmem.0
                    parse var virtmem.memi mem";"content
                    if mem = memaddr then do
                      say "Writing to same address..."
                      virtmem.memi = memaddr";"val
                      found = 1
                      leave
                    end
                  end
                  if found = 0 then do
                    /* need to store in our virtmap */
                    nvi = virtmem.0 + 1
                    virtmem.nvi = memaddr";"val
                    virtmem.0 = nvi
                  end
                end
              end
  end
end


/* now see how we do... */
say "Highest mem address    = "himem
say "Mapped memory goes to  = "virtmem.0

memsum = 0
do jj = 1 to virtmem.0
    parse var virtmem.jj mema";"content
    memsum = memsum + content
end


say "Answer part 2 = " memsum

/*------------------------------------------------*/
say "                 E N D E D                    "
say "----------------------------------------------"
exit

applyMask:
  parse arg intmask,val
  hexval = d2x(val)
  binval = x2b(hexval)
  /* mask is 36 bits wide... */
  v = right(binval,36,0)
  newval = ''
  do mm = 1 to length(intmask)
    select
      when substr(intmask,mm,1) = '1' then
        newval = newval || 1
      when substr(intmask,mm,1) = '0' then
        newval = newval || 0
      otherwise newval = newval || substr(v,mm,1)
    end
  end
  decres = x2d(b2x(newval))
  return decres

storeMem:
  parse arg where,what,memmask
  hexval = d2x(where)
  binval = x2b(hexval)
  /* mask is 36 bits wide... */
  v = right(binval,36,0)
  newval = ''
  addrs. = 0
  addr.0 = 0

  do mm = 1 to length(memmask)
    select
      when substr(memmask,mm,1) = '1' then
        newval = newval || 1
      when substr(memmask,mm,1) = '0' then
        newval = newval || substr(v,mm,1)
      when substr(memmask,mm,1) = 'X' then
        newval = newval || 'X'
      otherwise newval = newval || substr(v,mm,1)
    end
  end

  /* newval is the masked memory address */

  xpos. = 0
  xpos.0 = 0

  do mmm = 1 to length(newval)
    if substr(newval,mmm,1) = 'X' then do
      npx = xpos.0 + 1
      xpos.npx = mmm
      xpos.0 = npx
    end
  end

  possibilities = 2 ** xpos.0

  do kkk = 0 to possibilities - 1 /* because from 0-7 for example */
    bitstring = right(x2b(d2x(kkk)),36,0)
    /* get rid of 0 overflow at start */
    nozerostart = substr(bitstring,length(bitstring)-xpos.0+1,xpos.0)
    toadd = ''
    valpos = 1
    do a = 1 to length(newval)
      if substr(newval,a,1) = 'X' then do
        toadd = toadd || substr(nozerostart,valpos,1)
        valpos = valpos + 1
      end
      else
        toadd = toadd || substr(newval,a,1)
    end
    na = addrs.0 + 1
    addrs.na = toadd
    addrs.0 = na
  end

  resval = ''
  do nnn = 1 to addrs.0
    resval = resval || ' ' || x2d(b2x(addrs.nnn))
  end
  /* decres = x2d(b2x(newval))  */
  return resval
